name: CI DotNet Stryker

on:
  workflow_call:
    inputs:
      pr-comment-mark:
        type: string
        description: "String to mark the PR comment"
        default: "Stryker-Mutation-Comment"
      results-directory:
        type: string
        description: "Directory to store results"
        required: false
        default: "stryker-results"

jobs:
  stryker-run:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "8.x"

      - name: Install Stryker
        run: dotnet tool install -g dotnet-stryker --version 3.13.2

      - name: Create Results Folder
        id: results-folder
        run: |
          mkdir -p ${{ github.workspace }}/stryker-results/reports

          echo "path=${{ github.workspace }}/stryker-results/" >> $GITHUB_OUTPUT
          echo "path-file-log=${{ github.workspace }}/stryker-results/stryker.log" >> $GITHUB_OUTPUT
          echo "path-file-summary-table=${{ github.workspace }}/stryker-results/mutation-report-summary-table.md" >> $GITHUB_OUTPUT

          echo "path-reports=${{ github.workspace }}/stryker-results/reports/" >> $GITHUB_OUTPUT
          echo "path-reports-file-md=${{ github.workspace }}/stryker-results/reports/mutation-report.md" >> $GITHUB_OUTPUT

      - name: Run Stryker
        run: dotnet stryker -V debug | tee ${{ github.workspace }}/stryker-results/stryker.log

      - name: Move Mutation Reports
        run: |
          mv ./StrykerOutput/*/reports/*.* ${{ github.workspace }}/stryker-results/reports/

      - name: Capture Mutation Score
        id: capture-mutation-score
        run: |
          file="${{ github.workspace }}/stryker-results/stryker.log"
          line=$(grep "The final mutation score is" "$file")
          format_number() {
            awk '{printf "%g\n", $1}'
          }
          mutation_score=$(echo "$line" | awk '{print $8}' | format_number)
          echo "MUTATION_SCORE=$mutation_score" >> $GITHUB_ENV

      - name: Capture Options Threshold
        id: capture-options-threshold
        run: |
          file="${{ github.workspace }}/stryker-results/stryker.log"
          json=$(grep "\[.*\] Stryker started with options:" "$file" | sed 's/.*options: //' | sed 's/^[ \t]*//;s/[ \t]*$//')
          if [ -z "$json" ]; then
            threshold_high=80
            threshold_low=60
            threshold_break=0
          else        
            threshold_high=$(echo "$json" | jq '.Thresholds.High // 80')
            threshold_low=$(echo "$json" | jq '.Thresholds.Low // 60')
            threshold_break=$(echo "$json" | jq '.Thresholds.Break // 0')
          fi
          echo "THRESHOLD_HIGH=$threshold_high" >> $GITHUB_ENV
          echo "THRESHOLD_LOW=$threshold_low" >> $GITHUB_ENV
          echo "THRESHOLD_BREAK=$threshold_break" >> $GITHUB_ENV

      - name: Calculate Mutation Score Hint
        run: |
          if [ "$MUTATION_SCORE" -ge "$THRESHOLD_HIGH" ]; then
            echo "MUTATION_SCORE_HINT=High" >> $GITHUB_ENV
          elif [ "$MUTATION_SCORE" -lt "$THRESHOLD_HIGH" ] && [ "$MUTATION_SCORE" -ge "$THRESHOLD_LOW" ]; then
            echo "MUTATION_SCORE_HINT=Medium" >> $GITHUB_ENV
          else
            echo "MUTATION_SCORE_HINT=Low" >> $GITHUB_ENV
          fi

      - name: Show Mutation Score
        run: |
          echo "Mutation Score: $MUTATION_SCORE"
          echo "Mutation Score Hint: $MUTATION_SCORE_HINT"
          echo "Threshold High: $THRESHOLD_HIGH"
          echo "Threshold Low: $THRESHOLD_LOW"
          echo "Threshold Break: $THRESHOLD_BREAK"

      - name: Create Stryker Json Result
        run: |
          file_result="${{ github.workspace }}/stryker-results/stryker.json"
          echo "{
            \"mutation_run\": \"${{ github.run_number }}-${{ github.run_attempt }}\",
            \"mutation_score\": $MUTATION_SCORE,
            \"mutation_score_hint\": \"$MUTATION_SCORE_HINT\",
            \"threshold_high\": $THRESHOLD_HIGH,
            \"threshold_low\": $THRESHOLD_LOW,
            \"threshold_break\": $THRESHOLD_BREAK
          }" > "$file_result"
          ls -la ${{ github.workspace }}/stryker-results

      - name: Upload Stryker Results
        uses: actions/upload-artifact@v4
        with:
          name: stryker-results
          path: ${{ github.workspace }}/stryker-results/

  stryker-report:
    needs: stryker-run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Stryker Results
        uses: actions/download-artifact@v4
        with:
          name: stryker-results
          path: ${{ github.workspace }}/stryker-results/

      - name: Capture Results
        run: |
          file="${{ github.workspace }}/stryker-results/stryker.json"
          mutation_score=$(jq '.mutation_score' "$file")
          mutation_score_hint=$(jq '.mutation_score_hint' "$file")
          threshold_high=$(jq '.threshold_high' "$file")
          threshold_low=$(jq '.threshold_low' "$file")
          threshold_break=$(jq '.threshold_break' "$file")

          echo "MUTATION_SCORE=$mutation_score" >> $GITHUB_ENV
          echo "MUTATION_SCORE_HINT=$mutation_score_hint" >> $GITHUB_ENV
          echo "THRESHOLD_HIGH=$threshold_high" >> $GITHUB_ENV
          echo "THRESHOLD_LOW=$threshold_low" >> $GITHUB_ENV
          echo "THRESHOLD_BREAK=$threshold_break" >> $GITHUB_ENV

      - name: Show Mutation Score
        run: |
          echo "Mutation Score: $MUTATION_SCORE"
          echo "Mutation Score Hint: $MUTATION_SCORE_HINT"
          echo "Threshold High: $THRESHOLD_HIGH"
          echo "Threshold Low: $THRESHOLD_LOW"
          echo "Threshold Break: $THRESHOLD_BREAK"
          echo "Mutation Score Hint: $MUTATION_SCORE_HINT"

      - name: Create Report Folder
        run: |
          mkdir -p ${{ github.workspace }}/stryker-report

      - name: Check Mutation Report Markdown
        id: check-report-md
        run: |
          if [ -f ${{ github.workspace }}/stryker-results/reports/mutation-report.md ]; then
            echo "O arquivo mutation-report.md existe."
            echo "result=true" >> $GITHUB_OUTPUT            
          else
            echo "O arquivo mutation-report.md n√£o existe."
          fi

      - name: Create Report Files Summary
        id: create-files-summary
        run: |
          file_mutation_report_md="${{ github.workspace }}/stryker-results/reports/mutation-report.md"
          file_result="${{ github.workspace }}/stryker-report/pr-report-new-files-summary.md"

          if [ -f "$file_mutation_report_md" ]; then
            echo "Mutation report markdown exists."            
            table_content=$(sed -n '/# Mutation Testing Summary/,/## The final mutation score is/ {/^|/p}' "$file_mutation_report_md")
          else
            echo "Mutation report markdown not found."
            table_content="To see files summary, please configure (markdown reporter)[https://stryker-mutator.io/docs/stryker-net/configuration/#reporter-string]."
          fi

          echo "<details>

          <summary>Files summary</summary>
            
          $table_content
            
          </details>" > "$file_result"
           
          echo "file=$file_result" >> $GITHUB_OUTPUT

          cat "$file_result"

      - name: Create Report Content
        run: |
          file_summary="${{ steps.create-files-summary.outputs.file }}"
          file_result=${{ github.workspace }}/stryker-report/pr-report-new-content.md

          if [ "$MUTATION_SCORE_HINT" == "High" ]; then
            static_badge_color="green"
          elif [ "$MUTATION_SCORE_HINT" == "Medium" ]; then
            static_badge_color="yellow"
          else
            static_badge_color="red"
          fi 

          static_badge="![Static Badge](https://img.shields.io/badge/$MUTATION_SCORE%25-Mutation%20Tests-$static_badge_color)"

          echo "# Mutation Testing Summary $static_badge
            
          $(cat $file_summary)

          ## The final mutation score is $MUTATION_SCORE%

          ### *Coverage Thresholds: high:$THRESHOLD_HIGH low:$THRESHOLD_LOW break:$THRESHOLD_BREAK*
          " > "$file_result"

          echo "file=$file_result" >> $GITHUB_OUTPUT

          cat "$file_result"

      - uses: jwalton/gh-find-current-pr@v1
        id: finder

      - name: Get PR Current JSON
        run: gh pr view ${{ steps.finder.outputs.pr }} -c --json body,comments > pr-current.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Try Get PR Report Current
        id: try-get-pr-report-current
        run: |
          file="${{ github.workspace }}/stryker-report/pr-report-current.md"
          pr_body=$(jq -r 'select(.body | contains("<!-- Stryker-Report -->")) | .body' pr-current.json)
          pr_comment_body=$(jq -r '.comments[] | select(.body | contains("<!-- ${{ inputs.pr-comment-mark }} -->")) | .body' pr-current.json)

          if [ -n "$pr_body" ]; then
            echo "Stryker PR Body exists."
            pr_current=$(echo "$pr_body" | sed -n '/<!-- Stryker-Report -->/,/<!-- Stryker-Report-End -->/p' | sed '1d;$d')
          elif [ -n "$pr_comment_body" ]; then
            echo "Stryker PR Comment exists."
            pr_current=$pr_comment_body            
          else
            echo "Stryker PR Report not found."
          fi

          if [ -n "$pr_current" ]; then
            echo "$pr_current" > "$file"
            echo "result=true" >> $GITHUB_OUTPUT
            echo "result_file=$file" >> $GITHUB_OUTPUT
          else  
            echo "result=false" >> $GITHUB_OUTPUT
          fi

          cat "$file"

      - name: Create PR Report History
        if: steps.try-get-pr-report-current.outputs.result == 'true'
        run: |
          file="${{ github.workspace }}/stryker-report/pr-report-new-content-history.md"

          file_current="${{ steps.try-get-pr-report-current.outputs.result_file }}"          

          title_line=$(grep -oP 'Mutation Testing Summary.*!\[Static Badge\].*' "$file_current") 
          thresholds_line=$(grep -oP 'Coverage Thresholds.*high.*' "$file_current")

          pr_number=$(grep -oP '(?<=<!--STRYKER-PR-)[^>]+(?=-->)' "$file_current")
          badge=$(echo "$title_line" | sed 's/.*!\[Static Badge\]/![Static Badge]/' | tr -d '\n')
          score=$(grep -oP '(?<=The final mutation score is ).*' "$file_current" | tr -d '\n')
          thresholds=$(grep -oP 'Coverage Thresholds.*high.*' "$file_current" | sed 's/.*high/high/' | sed 's/\*//g' | tr -d '\n')

          history_table=$(sed -n '/<!--HISTORY-->/, /<!--HISTORY-END-->/ { //!p; }' "$file_current")

          history_line="|$pr_number|$thresholds|$score|$badge|"

          if [ -n "$history_table" ]; then
            echo "History section exists."
          else
            echo "History section not found."
            history_table="|PR Run|Thresholds|Score|Badge|"
          fi

          echo "<!--HISTORY-->
          $history_table
          $history_line
          <!--HISTORY-END-->" > "$file"

          cat "$file"

      - name: Extract Issue Comment Number
        run: |
          url=$(jq -r '.comments[] | select(.body | contains("<!-- Stryker-Mutation-Comment -->")) | .url' pr-current.json)
          comment_id=$(echo $url | sed -n 's/.*#issuecomment-\([0-9]*\).*/\1/p')
          echo "Comment ID: $comment_id"
          echo "comment_id=$comment_id" >> $GITHUB_ENV
