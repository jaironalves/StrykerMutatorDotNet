name: CI DotNet Stryker

on:
  workflow_call:
    inputs:
      pr-number:
        type: number
        description: "Pull Request Number"        
      pr-report-destination:
        type: string
        description: "Destination to post PR report"
        default: "pr-body" 
      pr-comment-mark:
        type: string
        description: "String to mark the PR comment"
        default: "Stryker-Mutation-Comment"
      results-directory:
        type: string
        description: "Directory to store results"
        required: false
        default: "stryker-results"

jobs:
  stryker-run:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "8.x"

      - name: Install Stryker
        run: dotnet tool install -g dotnet-stryker --version 3.13.2

      - name: Create Results Folder
        id: results-folder
        run: |
          mkdir -p ${{ github.workspace }}/stryker-results/reports

          echo "path=${{ github.workspace }}/stryker-results/" >> $GITHUB_OUTPUT
          echo "path-file-log=${{ github.workspace }}/stryker-results/stryker.log" >> $GITHUB_OUTPUT
          echo "path-file-summary-table=${{ github.workspace }}/stryker-results/mutation-report-summary-table.md" >> $GITHUB_OUTPUT

          echo "path-reports=${{ github.workspace }}/stryker-results/reports/" >> $GITHUB_OUTPUT
          echo "path-reports-file-md=${{ github.workspace }}/stryker-results/reports/mutation-report.md" >> $GITHUB_OUTPUT

      - name: Run Stryker
        run: dotnet stryker -V debug | tee ${{ github.workspace }}/stryker-results/stryker.log

      - name: Move Mutation Reports
        run: |
          mv ./StrykerOutput/*/reports/*.* ${{ github.workspace }}/stryker-results/reports/

      - name: Capture Mutation Score
        id: capture-mutation-score
        run: |
          file="${{ github.workspace }}/stryker-results/stryker.log"
          line=$(grep "The final mutation score is" "$file")
          format_number() {
            awk '{printf "%g\n", $1}'
          }
          mutation_score=$(echo "$line" | awk '{print $8}' | format_number)
          echo "MUTATION_SCORE=$mutation_score" >> $GITHUB_ENV

      - name: Capture Options Threshold
        id: capture-options-threshold
        run: |
          file="${{ github.workspace }}/stryker-results/stryker.log"
          json=$(grep "\[.*\] Stryker started with options:" "$file" | sed 's/.*options: //' | sed 's/^[ \t]*//;s/[ \t]*$//')
          if [ -z "$json" ]; then
            threshold_high=80
            threshold_low=60
            threshold_break=0
          else        
            threshold_high=$(echo "$json" | jq '.Thresholds.High // 80')
            threshold_low=$(echo "$json" | jq '.Thresholds.Low // 60')
            threshold_break=$(echo "$json" | jq '.Thresholds.Break // 0')
          fi
          echo "THRESHOLD_HIGH=$threshold_high" >> $GITHUB_ENV
          echo "THRESHOLD_LOW=$threshold_low" >> $GITHUB_ENV
          echo "THRESHOLD_BREAK=$threshold_break" >> $GITHUB_ENV

      - name: Calculate Mutation Score Hint
        run: |
          if [ "$MUTATION_SCORE" -ge "$THRESHOLD_HIGH" ]; then
            echo "MUTATION_SCORE_HINT=High" >> $GITHUB_ENV
          elif [ "$MUTATION_SCORE" -lt "$THRESHOLD_HIGH" ] && [ "$MUTATION_SCORE" -ge "$THRESHOLD_LOW" ]; then
            echo "MUTATION_SCORE_HINT=Medium" >> $GITHUB_ENV
          else
            echo "MUTATION_SCORE_HINT=Low" >> $GITHUB_ENV
          fi

      # - name: Show Mutation Score
      #   run: |
      #     echo "Mutation Score: $MUTATION_SCORE"
      #     echo "Mutation Score Hint: $MUTATION_SCORE_HINT"
      #     echo "Threshold High: $THRESHOLD_HIGH"
      #     echo "Threshold Low: $THRESHOLD_LOW"
      #     echo "Threshold Break: $THRESHOLD_BREAK"

      - name: Create Stryker Json Result
        run: |
          file_result="${{ github.workspace }}/stryker-results/stryker.json"
          run_date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "{
            \"mutation_run\": \"${{ github.run_number }}-${{ github.run_attempt }}\",
            \"mutation_run_date\": \"$run_date\",
            \"mutation_score\": $MUTATION_SCORE,
            \"mutation_score_hint\": \"$MUTATION_SCORE_HINT\",
            \"threshold_high\": $THRESHOLD_HIGH,
            \"threshold_low\": $THRESHOLD_LOW,
            \"threshold_break\": $THRESHOLD_BREAK
          }" > "$file_result"
          ls -la ${{ github.workspace }}/stryker-results

      - name: Upload Stryker Results
        uses: actions/upload-artifact@v4
        with:
          name: stryker-results
          path: ${{ github.workspace }}/stryker-results/

  stryker-report:    
    needs: stryker-run
    runs-on: ubuntu-latest    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Stryker Results
        uses: actions/download-artifact@v4
        with:
          name: stryker-results
          path: ${{ github.workspace }}/stryker-results/

      - name: Capture Results
        run: |
          file="${{ github.workspace }}/stryker-results/stryker.json"
          mutation_run=$(jq -r '.mutation_run' "$file")
          mutation_run_date=$(jq -r '.mutation_run_date' "$file")
          mutation_score=$(jq '.mutation_score' "$file")
          mutation_score_hint=$(jq -r '.mutation_score_hint' "$file")
          threshold_high=$(jq '.threshold_high' "$file")
          threshold_low=$(jq '.threshold_low' "$file")
          threshold_break=$(jq '.threshold_break' "$file")

          echo "MUTATION_RUN=$mutation_run" >> $GITHUB_ENV
          echo "MUTATION_RUN_DATE=$mutation_run_date" >> $GITHUB_ENV
          echo "MUTATION_SCORE=$mutation_score" >> $GITHUB_ENV
          echo "MUTATION_SCORE_HINT=$mutation_score_hint" >> $GITHUB_ENV
          echo "THRESHOLD_HIGH=$threshold_high" >> $GITHUB_ENV
          echo "THRESHOLD_LOW=$threshold_low" >> $GITHUB_ENV
          echo "THRESHOLD_BREAK=$threshold_break" >> $GITHUB_ENV

      - name: Show Mutation Score
        run: |
          echo "Mutation Run: $MUTATION_RUN" 
          echo "Mutation Run Date: $MUTATION_RUN_DATE" 
          echo "Mutation Score: $MUTATION_SCORE"
          echo "Mutation Score Hint: $MUTATION_SCORE_HINT"
          echo "Threshold High: $THRESHOLD_HIGH"
          echo "Threshold Low: $THRESHOLD_LOW"
          echo "Threshold Break: $THRESHOLD_BREAK"
          echo "Mutation Score Hint: $MUTATION_SCORE_HINT"

      - name: Create Report Folder
        run: |
          mkdir -p ${{ github.workspace }}/stryker-reports

      - name: Create Report Files Summary
        id: create-files-summary
        run: |
          file_mutation_report_md="${{ github.workspace }}/stryker-results/reports/mutation-report.md"
          file_result="${{ github.workspace }}/stryker-reports/report-files-summary.md"

          if [ -f "$file_mutation_report_md" ]; then
            echo "Mutation report markdown exists."            
            table_content=$(sed -n '/# Mutation Testing Summary/,/## The final mutation score is/ {/^|/p}' "$file_mutation_report_md")
          else
            echo "Mutation report markdown not found."
            table_content="To see files summary, please configure (markdown reporter)[https://stryker-mutator.io/docs/stryker-net/configuration/#reporter-string]."
          fi

          echo "<details>

          <summary>Files summary</summary>
            
          $table_content
            
          </details>" > "$file_result"
           
          echo "file=$file_result" >> $GITHUB_OUTPUT

          cat "$file_result"

      - name: Create Report Content
        id: create-report-content
        run: |
          file_summary="${{ steps.create-files-summary.outputs.file }}"
          file_result=${{ github.workspace }}/stryker-reports/report.md
                    
          if [ "$MUTATION_SCORE_HINT" == "High" ]; then
            static_badge_color="green"
          elif [ "$MUTATION_SCORE_HINT" == "Medium" ]; then
            static_badge_color="yellow"
          else
            static_badge_color="red"
          fi

          static_badge="![Static Badge](https://img.shields.io/badge/$MUTATION_SCORE%25-Mutation%20Tests-$static_badge_color)"
          formatted_score=$(printf "%.2f" "$MUTATION_SCORE" | sed 's/\./,/')

          echo "## Mutation Testing Summary $static_badge
            
          $(cat $file_summary)

          ### The final mutation score is $formatted_score%

          #### *Coverage Thresholds: high:$THRESHOLD_HIGH low:$THRESHOLD_LOW break:$THRESHOLD_BREAK*
          " > "$file_result"

          echo "file=$file_result" >> $GITHUB_OUTPUT

          cat "$file_result"
          
      - name: Report GitHub Summary
        run : |
          file="${{ steps.create-report-content.outputs.file }}"
          cat "$file" >> $GITHUB_STEP_SUMMARY

      - name: Upload Stryker Report
        uses: actions/upload-artifact@v4
        with:
          name: stryker-reports
          path: ${{ github.workspace }}/stryker-reports/


  stryker-report-pull-request:
    if: ${{ github.event_name == 'pull_request' }}
    needs: 
      - stryker-run
      - stryker-report
    runs-on: ubuntu-latest
    env:
      pr-number: ${{ inputs.pr-number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Stryker Results
        uses: actions/download-artifact@v4
        with:
          name: stryker-results
          path: ${{ github.workspace }}/stryker-results/

      - name: Download Stryker Reports
        uses: actions/download-artifact@v4
        with:
          name: stryker-reports
          path: ${{ github.workspace }}/stryker-reports/

      - name: Capture Results
        run: |
          file="${{ github.workspace }}/stryker-results/stryker.json"
          mutation_run=$(jq -r '.mutation_run' "$file")
          mutation_run_date=$(jq -r '.mutation_run_date' "$file")
          mutation_score=$(jq '.mutation_score' "$file")
          mutation_score_hint=$(jq -r '.mutation_score_hint' "$file")
          threshold_high=$(jq '.threshold_high' "$file")
          threshold_low=$(jq '.threshold_low' "$file")
          threshold_break=$(jq '.threshold_break' "$file")

          echo "MUTATION_RUN=$mutation_run" >> $GITHUB_ENV
          echo "MUTATION_RUN_DATE=$mutation_run_date" >> $GITHUB_ENV
          echo "MUTATION_SCORE=$mutation_score" >> $GITHUB_ENV
          echo "MUTATION_SCORE_HINT=$mutation_score_hint" >> $GITHUB_ENV
          echo "THRESHOLD_HIGH=$threshold_high" >> $GITHUB_ENV
          echo "THRESHOLD_LOW=$threshold_low" >> $GITHUB_ENV
          echo "THRESHOLD_BREAK=$threshold_break" >> $GITHUB_ENV    

      - name: Create PR Report Folder
        run: |
          mkdir -p ${{ github.workspace }}/stryker-report-pr

      - name: Get PR Number
        id: finder
        if: ${{ env.pr-number }} == null
        uses: jwalton/gh-find-current-pr@v1        

      - name: Set PR Number        
        id: set-pr-number
        run: |
          echo "pr=${{ env.pr-number || steps.finder.outputs.pr }}" >> $GITHUB_OUTPUT        

      - name: Get PR Current JSON
        run: gh pr view ${{ steps.set-pr-number.outputs.pr }} -c --json body,comments,url > pr-current.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Init PR Report Params
        id: pr-report-params
        run: |
          file="${{ github.workspace }}/stryker-report-pr/current.md"

          if [ ${{ inputs.pr-report-destination }} == "pr-body" ]; then
            pr_body_with_report=$(jq -r 'select(.body | contains("<!--STRYKER-REPORT-->")) | .body' pr-current.json)
            pr_report=$(echo "$pr_body_with_report" | tr -d '\r' | sed -n '/<!--STRYKER-REPORT-->/,/<!--STRYKER-REPORT-END-->/p' | sed '1d;$d')            
          else
            pr_comment_with_report=$(jq -r '.comments[] | select(.body | contains("<!--STRYKER-REPORT-->")) | .body' pr-current.json)
            pr_report=$(echo "$pr_comment_with_report" | tr -d '\r')

            pr_report_url=$(jq -r '.comments[] | select(.body | contains("<!--STRYKER-REPORT-->")) | .url' pr-current.json)
            pr_report_comment_id=$(echo $pr_report_url | sed -n 's/.*#issuecomment-\([0-9]*\).*/\1/p')
          fi

          echo "destination=${{ inputs.pr-report-destination }}" >> $GITHUB_OUTPUT
          echo "pr_number=${{ steps.set-pr-number.outputs.pr }}" >> $GITHUB_OUTPUT
          echo "pr_report_comment_id=$pr_report_comment_id" >> $GITHUB_OUTPUT

          if [ -n "$pr_report" ]; then
            echo "Stryker PR Report exists."
            echo "$pr_report" > "$file"
            echo "has_current=true" >> $GITHUB_OUTPUT            
            echo "current_file=$file" >> $GITHUB_OUTPUT
          else
            echo "Stryker PR Report not found."
            echo "has_current=false" >> $GITHUB_OUTPUT
          fi          

          cat "$file"      

      - name: Create PR Report History - Set Variables        
        if: steps.pr-report-params.outputs.has_current == 'true'
        run: |
          file_current="${{ steps.pr-report-params.outputs.current_file }}"          
  
          title_line=$(sed -n '/Mutation Testing Summary.*!\[Static Badge\].*/p' "$file_current")
  
          run_number=$(sed -n 's/^<!--STRYKER-PR-\([^|]*\)|.*/\1/p' "$file_current")
          date_time=$(sed -n 's/^<!--STRYKER-PR.*|\(.*\)-->.*/\1/p' "$file_current")
          badge=$(echo "$title_line" | sed 's/.*!\[Static Badge\]/![Static Badge]/')
          score=$(sed -n 's/.*mutation score is \(.*\)$/\1/p' "$file_current")
          thresholds=$(sed -n '/Coverage Thresholds.*high/s/.*high/high/; s/\*//gp' "$file_current")

          gmt_minus_3_date_time=$(TZ='America/Sao_Paulo' date -d "$date_time" +"%d-%m-%Y %H:%M:%S %Z")
          echo "GMT-3 Date Time: $gmt_minus_3_date_time"

          echo "HISTORY_RUN_NUMBER=$run_number" >> $GITHUB_ENV
          echo "HISTORY_RUN_DATE=$date_time" >> $GITHUB_ENV
          echo "HISTORY_BADGE=$badge" >> $GITHUB_ENV
          echo "HISTORY_SCORE=$score" >> $GITHUB_ENV
          echo "HISTORY_THRESHOLDS=$thresholds" >> $GITHUB_ENV

      - name: Create PR Report History
        id: create-report-history
        if: steps.pr-report-params.outputs.has_current == 'true'
        run: |
          file="${{ github.workspace }}/stryker-report/pr-report-new-content-history.md"
          file_current="${{ steps.pr-report-params.outputs.current_file }}"
          
          history_table=$(sed -n '/<!--HISTORY-->/, /<!--HISTORY-END-->/ { //!p; }' "$file_current")

          history_line="|$HISTORY_RUN_DATE|$HISTORY_RUN_NUMBER|$HISTORY_THRESHOLDS|$HISTORY_SCORE|$HISTORY_BADGE|" 

          if [ -n "$history_table" ]; then
            echo "History section exists."
          else
            echo "History section not found."
            history_table="Date|Run|Thresholds|Score|Badge|"
          fi

          echo "
          ## Mutation Pull Request History

          <details>

          <summary>History table</summary>

          <!--HISTORY-->
          $history_table
          $history_line
          <!--HISTORY-END-->
          
          </details>" > "$file"

          echo "file=$file" >> $GITHUB_OUTPUT

          cat "$file"

      - name: Create PR Report
        id: create-report
        run: |
          file_content="${{ github.workspace }}/stryker-reports/report.md"
          file_history="${{ steps.create-report-history.outputs.file }}"          
          file="${{ github.workspace }}/stryker-report-pr/new.md"

          history_content=""
          if [ -f "$file_history" ]; then
            history_content="
          $(cat "$file_history")

          "
          fi

          echo "<!--STRYKER-REPORT-->
          <!--PLEASE DO NOT REMOVE OR EDIT CONTENT-->
          $(cat $file_content)
          $history          
          <!--STRYKER-REPORT-END-->" > "$file"

          echo "file=$file" >> $GITHUB_OUTPUT

          cat "$file"
      
      # - name: Create or Update Report Comment
      #   if: steps.pr-report-params.outputs.destination != 'pr-body'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     PR_REPORT_COMMENT_ID: ${{ steps.pr-report-params.outputs.pr_report_comment_id }}
      #     PR_NUMBER: ${{ steps.pr-report-params.outputs.pr_number }}
      #     REPOSITORY: ${{ github.repository }}
      #     REPORT_CONTENT: ${{ steps.create-report.outputs.file }}
      #   run: |
      #     body=$(cat "$REPORT_CONTENT")
      #     if [ -z "$PR_REPORT_COMMENT_ID" ]; then
      #       echo "Creating a new report comment..."
      #       gh api \
      #         -X POST \
      #         -H "Accept: application/vnd.github.v3+json" \
      #         "/repos/$REPOSITORY/issues/$PR_NUMBER/comments" \
      #         -f body="$body"
      #     else
      #       echo "Updating the existing report comment..."
      #       gh api \
      #         -X PATCH \
      #         -H "Accept: application/vnd.github.v3+json" \
      #         "/repos/$REPOSITORY/issues/comments/$PR_REPORT_COMMENT_ID" \
      #         -f body="$body"
      #     fi
          
      - name: Update Report PR Body
        if: steps.pr-report-params.outputs.destination == 'pr-body'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.pr-report-params.outputs.pr_number }}          
          REPORT_CONTENT: ${{ steps.create-report.outputs.file }}        
        run: |          
          pr_body_json=$(jq -r '.body' pr-current.json)
          pr_body=$(echo "$pr_body_json" | tr -d '\r')          
          
          report_content=$(cat "${{ steps.create-report.outputs.file }}")          

          start_marker="<!--STRYKER-REPORT-->"
          end_marker="<!--STRYKER-REPORT-END-->"
          
          if [[ "$pr_body" == *"$start_marker"* && "$pr_body" == *"$end_marker"* ]]; then
            echo "Updating existing report content..."
            
            new_mark="##STRYKER-REPORT-NEW##"
            pr_body_new_mark=$(echo "$pr_body" | sed -e "/$start_marker/,/$end_marker/c\\$new_mark")

            pr_body_before=$(echo "$pr_body_new_mark" | sed "/$new_mark/, \$d")           
            pr_body_after=$(echo "$pr_body_new_mark" | sed -n "/$new_mark/, \$p" | sed '1d')

            echo "Before:"
            echo "$pr_body_before"
            echo "....."
            echo "....."

            echo "After:"
            echo "$pr_body_after"
            echo "....."
            echo "....."

            pr_body_new="$pr_body_before
          $report_content
          $pr_body_after"

            #pr_body_new=$(echo "$pr_body_new_mark" | sed "/$new_mark/c\\${report_content@Q}")

            #updated_body=$(echo "$pr_body_content" | sed -e "/$start_marker/,/$end_marker/c\\$replace_mark")
            #updated_body=$(echo "$updated_body" | awk -v mark="$replace_mark" -v content="$report_content" '{gsub(mark, content); print}')
            #updated_body=$(echo "$updated_body" | sed -e "/$start_marker/a $report_content")
          else
            echo "Adding new report content..."
            pr_body_new="${pr_body:+$pr_body\n\n\n\n}$report_content"
          fi
          
          echo "$pr_body_new"

          #gh pr edit $PR_NUMBER --body "$pr_body_new"

      - name: Create or Update Report Labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh label create mutation-test-high -f --description "Mutation tests coverage high" --color 0E8A16
          gh label create mutation-test-medium -f --description "Mutation tests coverage medium" --color FDD835
          gh label create mutation-test-low -f --description "Mutation tests coverage low" --color B60205

      - name: Update PR Report Labels
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          PR_NUMBER: ${{ steps.pr-report-params.outputs.pr_number }}
        run: |
          if [ "$MUTATION_SCORE_HINT" == "High" ]; then
            gh pr edit $PR_NUMBER --add-label "mutation-test-high" --remove-label "mutation-test-medium,mutation-test-low"
          elif [ "$MUTATION_SCORE_HINT" == "Medium" ]; then
            gh pr edit $PR_NUMBER --add-label "mutation-test-medium" --remove-label "mutation-test-high,mutation-test-low"
          else
            gh pr edit $PR_NUMBER --add-label "mutation-test-low" --remove-label "mutation-test-high,mutation-test-medium"
          fi
